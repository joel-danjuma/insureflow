version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: insureflow_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:6-alpine
    container_name: insureflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  app:
    build: .
    container_name: insureflow_app
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES}
      - SQUAD_SECRET_KEY=${SQUAD_SECRET_KEY}
      - SQUAD_PUBLIC_KEY=${SQUAD_PUBLIC_KEY}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["/app/scripts/start.sh"]
    restart: unless-stopped

  dashboard:
    build: .
    container_name: insureflow_dashboard
    environment:
      - BACKEND_URL=http://app:8000/api/v1
    ports:
      - "8501:8501"
    depends_on:
      - app
    volumes:
      - .:/app
    command: ["streamlit", "run", "app/dashboard.py", "--server.address", "0.0.0.0"]
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 